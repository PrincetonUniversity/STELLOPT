#!/usr/bin/env python

print "usage: boozPlot_1.py <boozmnXXX.nc>"

max_m = 5
max_n = 5

import matplotlib.pyplot as plt
import numpy as np
from scipy.io import netcdf
import sys
import math
import inspect
import os
from os.path import abspath

if len(sys.argv) != 2:
    print "Error! You must specify 1 argument: the boozmnXXX.nc file."
    exit(1)

filename = sys.argv[1]
print "About to try loading file ",filename
f = netcdf.netcdf_file(filename,mode='r',mmap=False)

phi_b = f.variables['phi_b'][()]
ns_b = f.variables['ns_b'][()]
nfp_b = f.variables['nfp_b'][()]
ixn_b = f.variables['ixn_b'][()]
ixm_b = f.variables['ixm_b'][()]
bmnc_b = f.variables['bmnc_b'][()]
jlist = f.variables['jlist'][()]
f.close()
nmodes = len(ixn_b)

s = (jlist-1.5)/(ns_b-1.0)

fig = plt.figure()
fig.patch.set_facecolor('white')

numCols = 2
numRows = 1
plotNum = 1

#plt.subplot(numRows,numCols,plotNum)
#plotNum += 1
#for imode in range(nmodes):
#    plt.plot(abs(bmnc_b[:,imode]), '-')
#plt.xlabel('radial index')
#plt.yscale('log')
#plt.title('bmnc by fourier mode')

plt.subplot(numRows,numCols,plotNum)
plotNum += 1
for imode in range(nmodes):
    if ixn_b[imode]==0 and ixm_b[imode]==0:
        plt.plot(abs(bmnc_b[:,imode]), '-',label='n=0,m=0 (Background)')
    if ixn_b[imode]==0 and ixm_b[imode]==1:
        plt.plot(abs(bmnc_b[:,imode]), '-',label='n=0,m=1 (Toroidal)')
    if ixn_b[imode]/nfp_b==1 and ixm_b[imode]==1:
        plt.plot(abs(bmnc_b[:,imode]), '-',label='n=1,m=1 (Helical+)')
    if ixn_b[imode]/nfp_b==-1 and ixm_b[imode]==1:
        plt.plot(abs(bmnc_b[:,imode]), '-',label='n=-1,m=1 (Helical-)')
    if ixn_b[imode]/nfp_b==1 and ixm_b[imode]==0:
        plt.plot(abs(bmnc_b[:,imode]), '-',label='n=1,m=0 (Mirror)')
plt.xlabel('radial index')
plt.yscale('log')
plt.legend(fontsize='x-small')
plt.title('bmnc by fourier mode')

plt.subplot(numRows,numCols,plotNum)
plotNum += 1
for imode in range(nmodes):
    if ixn_b[imode]==0 and ixm_b[imode]==0:
        plt.plot(abs(bmnc_b[:,imode]), '-',label='n=0,m=0 (Background)')
    if ixn_b[imode]==0 and ixm_b[imode]==1:
        plt.plot(abs(bmnc_b[:,imode]), '-',label='n=0,m=1 (Toroidal)')
    if ixn_b[imode]==0 and ixm_b[imode]==2:
        plt.plot(abs(bmnc_b[:,imode]), '-',label='n=0,m=2 (Toroidal)')
    if ixn_b[imode]/nfp_b==1 and ixm_b[imode]==1:
        plt.plot(abs(bmnc_b[:,imode]), '-',label='n=1,m=1 (Helical+)')
    if ixn_b[imode]/nfp_b==2 and ixm_b[imode]==2:
        plt.plot(abs(bmnc_b[:,imode]), '-',label='n=2,m=2 (Helical+)')
    if ixn_b[imode]/nfp_b==-1 and ixm_b[imode]==1:
        plt.plot(abs(bmnc_b[:,imode]), '-',label='n=-1,m=1 (Helical-)')
    if ixn_b[imode]/nfp_b==-2 and ixm_b[imode]==2:
        plt.plot(abs(bmnc_b[:,imode]), '-',label='n=-2,m=2 (Helical-)')
    if ixn_b[imode]/nfp_b==1 and ixm_b[imode]==0:
        plt.plot(abs(bmnc_b[:,imode]), '-',label='n=1,m=0 (Mirror)')
plt.xlabel('radial index')
plt.yscale('log')
plt.legend(fontsize='x-small')
plt.title('bmnc by fourier mode')


plt.tight_layout()
titleString = "Plot generated by "+ abspath(inspect.getfile(inspect.currentframe()))
plt.figtext(0.5,0.01,titleString,horizontalalignment='center',verticalalignment='bottom',fontsize=6)
plt.figtext(0.5,0.99,'File = '+os.path.abspath(filename),horizontalalignment='center',verticalalignment='top',fontsize=6)

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

fig = plt.figure()
fig.patch.set_facecolor('white')

backgroundColor='b'
QAColor=[0,0.7,0]
mirrorColor=[0.7,0.5,0]
helicalColor=[1,0,1]

scale_factor = np.max(np.abs(bmnc_b))

# First, plot just the 1st mode of each type, so the legend looks nice.

for imode in range(nmodes):
    if ixn_b[imode]==0 and ixm_b[imode]==0:
        plt.semilogy(s,abs(bmnc_b[:,imode])/scale_factor, color=backgroundColor,label='m = 0, n = 0 (Background)')
        break
for imode in range(nmodes):
    if ixn_b[imode]==0 and ixm_b[imode]!=0:
        plt.semilogy(s,abs(bmnc_b[:,imode])/scale_factor, color=QAColor,label=r'm $\ne$ 0, n = 0 (Quasiaxisymmetric)')
        break
for imode in range(nmodes):
    if ixn_b[imode]!=0 and ixm_b[imode]==0:
        plt.semilogy(s,abs(bmnc_b[:,imode])/scale_factor, color=mirrorColor,label=r'm = 0, n $\ne$ 0 (Mirror)')
        break
for imode in range(nmodes):
    if ixn_b[imode]!=0 and ixm_b[imode]!=0:
        plt.semilogy(s,abs(bmnc_b[:,imode])/scale_factor, color=helicalColor,label=r'm $\ne$ 0, n $\ne$ 0 (Helical)')
        break
#plt.legend(fontsize='x-small',loc=2)
plt.legend(fontsize=9,loc=2)
# Now that the legend is node, plot all modes

for imode in range(nmodes):
    if np.abs(ixm_b[imode]) > max_m:
        continue
    if np.abs(ixn_b[imode]) > max_n * nfp_b:
        continue
    if ixn_b[imode]==0:
        if ixm_b[imode]==0:
            mycolor = backgroundColor
        else:
            mycolor = QAColor
    else:
        if ixm_b[imode]==0:
            mycolor = mirrorColor
        else:
            mycolor = helicalColor
    plt.semilogy(s,abs(bmnc_b[:,imode])/scale_factor, color=mycolor)

plt.xlabel('Normalized toroidal flux')
plt.title('Fourier harmonics of |B| in Boozer coordinates')
plt.ylim([1e-5,1.2])
plt.xlim([0,1])

plt.subplots_adjust(top=0.9,bottom=0.14,left=0.09,right=0.94)

titleString = "Plot generated by "+ abspath(inspect.getfile(inspect.currentframe()))
plt.figtext(0.5,0.01,titleString,horizontalalignment='center',verticalalignment='bottom',fontsize=6)
plt.figtext(0.5,0.99,'File = '+os.path.abspath(filename),horizontalalignment='center',verticalalignment='top',fontsize=6)

plt.show()


#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
exit(0)

numModesToPlot = 6

dataToSort = -abs(bmnc_b[-1,:])
perm = np.argsort(dataToSort)

fig = plt.figure()
fig.patch.set_facecolor('white')
for imode in range(numModesToPlot):
    index = perm[imode]
    plt.semilogy(s,abs(bmnc_b[:,index]),'-',label='m='+str(ixm_b[index])+', n='+str(ixn_b[index]))
plt.xlabel('Normalized toroidal flux')
plt.title(str(numModesToPlot)+' largest Fourier harmonics of |B| in Boozer coordinates')
plt.legend(fontsize='x-small',loc=0)

plt.subplots_adjust(top=0.9,bottom=0.14,left=0.09,right=0.94)

titleString = "Plot generated by "+ abspath(inspect.getfile(inspect.currentframe()))
plt.figtext(0.5,0.01,titleString,horizontalalignment='center',verticalalignment='bottom',fontsize=8)
plt.figtext(0.5,0.99,'File = '+filename,horizontalalignment='center',verticalalignment='top',fontsize=10)

plt.show()

