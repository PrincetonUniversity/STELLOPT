#!/usr/bin/env python

print "usage: bootsjPlot <answers_plot.XXX>"

import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import sys
import inspect, os

if len(sys.argv) != 2:
    print "Error! You must specify 1 argument: the answers_plot.XXX file."
    exit(1)

filename = sys.argv[1]
print "About to try loading file ",filename
f = open(filename,'r')
lines = f.readlines()
f.close()

# Here are the lines from BOOTSJ/output.f where the answers_plot.XXX file is written:
#      write(ians_plot, *) rhoar(i),  gbsnorm(i), amain(i),
#     1      aiterm1(i), other1(i),
#     2      dibs(i), bsdense(i), bsdensi(i), bstempe(i), bstempi(i),
#     3      qsafety(i), ftrapped(i), bsnorm(i),
#     4      tempe1(i),tempi1(i),dense(i), dense(i)/zeff1, betar(i),
#     5      ajBbs(i)
     
# Thus, the column numbers correspond to the following values:
#  0: rhoar
#  1: gbsnorm
#  2: amain
#  3: aiterm1
#  4: other1
#  5: dibs
#  6: bsdense
#  7: bdsensi
#  8: bstempe
#  9: bstempi
# 10: qsafety
# 11: ftrapped
# 12: bsnorm
# 13: tempe1
# 14: tempi1
# 15: dense
# 16: dense/zeff1
# 17: betar
# 18: ajBbs

s = []
tempe1 = []
tempi1 = []
dense = []
FSA_j_dot_B = []
counter = 0
for line in lines:
    for numstr in line.split():
        num = float(numstr)
        if counter==0:
            s.append(num)
        elif counter==13:
            tempe1.append(num)
        elif counter==14:
            tempi1.append(num)
        elif counter==15:
            dense.append(num)
        elif counter==18:
            FSA_j_dot_B.append(num)
        counter += 1
        if counter>18:
            counter=0


print "Flux surfaces found (s):",s

s = np.array(s)
dense = np.array(dense)
tempe1 = np.array(tempe1)
tempi1 = np.array(tempi1)
FSA_j_dot_B = np.array(FSA_j_dot_B)


matplotlib.rcParams.update({'font.size': 9})

fig = plt.figure()
fig.patch.set_facecolor('white')

numCols = 2
numRows = 2
plotNum = 1

plt.subplot(numRows,numCols,plotNum)
plotNum += 1
plt.plot(s, dense, '.-g')
plt.xlabel('Normalized toroidal flux s')
plt.ylabel('Electron density [10^20 m^-3]')
plt.ylim([0,np.max(dense)*1.2])
plt.xlim([0,1])

plt.subplot(numRows,numCols,plotNum)
plotNum += 1
plt.plot(s, tempe1, '+-b',label='e')
plt.plot(s, tempi1, 'x:r',label='i')
plt.xlabel('Normalized toroidal flux s')
plt.ylabel('Temperature [keV]')
plt.legend(loc=0,fontsize=8)
plt.ylim([0,np.max((np.max(tempe1),np.max(tempi1)))*1.2])
plt.xlim([0,1])

plt.subplot(numRows,numCols,plotNum)
plotNum += 1
plt.plot(s, FSA_j_dot_B/1000000,'.-r')
plt.xlabel('Normalized toroidal flux s')
plt.ylabel('<j dot B> [MA T / m^2]')
plt.xlim([0,1])

#titleString = "Plot generated by "+ inspect.getfile(inspect.currentframe()) + "\nRun in "+os.getcwd()
#titleString = "Plotting data in "+os.path.abspath(filename)
(head,tail) = os.path.split(os.path.abspath(filename))
titleString = "Plotting data file "+tail+"\nIn "+head
plt.figtext(0.5,0.99,titleString,horizontalalignment='center',verticalalignment='top')
titleString = "Plot generated by "+ inspect.getfile(inspect.currentframe())
plt.figtext(0.5,0.01,titleString,horizontalalignment='center',verticalalignment='bottom')

plt.show()

