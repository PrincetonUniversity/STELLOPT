#!/usr/bin/env python3
import sys, os
sys.path.insert(0, '../../pySTEL/')
import numpy as np                    #For Arrays
from math import pi
from libstell.beams3d import read_beams3d

try:
	qtCreatorPath=os.environ["STELLOPT_PATH"]
except KeyError:
	print("Please set environment variable STELLOPT_PATH")
	sys.exit(1)

lfail = 0
failtol = 1.0
filename='beams3d_ORBITS_er.h5'
data=read_beams3d(filename)
if not data:
    print('ERROR Opening File: '+filename)
    sys.exit(0)

# Calc values
rho = np.sqrt(data['S_lines'])
rho_max = np.max(rho,axis=1)
rho_min = np.min(rho,axis=1)
data['delta'] = rho_max-rho_min
x = data['R_lines']-10.0
y = data['Z_lines']
theta = np.arctan2(y,x)
theta = np.where(theta > np.pi,theta-pi,theta)
data['turning'] = np.max(theta,axis=1)
data['R0']=data['R_lines'][:,0]
data['R1']=data['R_lines'][:,1]
data['R100']=data['R_lines'][:,100]
data['R500']=data['R_lines'][:,500]

print('BEAMS3D VERSION: ' + str(data['VERSION']))
print('==== Vectors ====')
varlist={}
varlist['turning']=np.array([0.73180691, 0.79077919, 0.85084976, 0.91206296, 0.97471198, 1.03889871, \
 1.10484701, 1.17282965, 1.24310841, 1.31602685, 1.39204165, 1.47160793, \
 1.55539777, 1.64419891, 1.73885159, 1.84156844, 1.95386667, 2.07914109, \
 2.22304785, 2.39679566, 2.63044143, 3.1404454,  3.14094554, 3.13893516, \
 3.13796695, 3.13884934, 3.14156672, 3.1380161,  3.14110377, 3.13710168, \
 3.1391193,  3.14035009, 3.14018825, 3.13336669, 3.14139245, 3.14027234, \
 3.13772777, 3.123608,   3.13986829, 3.12792151])
varlist['delta']= np.array([0.05423809, 0.05817742, 0.06208664, 0.06597614, 0.06983697, 0.07367174, \
 0.07747871, 0.08125854, 0.08501104, 0.08873631, 0.09243478, 0.096107, \
 0.09975398, 0.1033743,  0.1069705,  0.11053931, 0.11408478, 0.11761708, \
 0.12112878, 0.12461822, 0.12809816, 0.05480828, 0.04660301, 0.04265478, \
 0.03987399, 0.03770953, 0.03593645, 0.03444081, 0.0331503,  0.03201852, \
 0.03101717, 0.03012036, 0.02931986, 0.02858762, 0.02792307, 0.02731063, \
 0.02675561, 0.02624057, 0.02576578, 0.02532567])
varlist['R0'] = np.array([10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5,\
 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, \
 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5])
varlist['R1'] = np.array([10.49940157, 10.49930165, 10.49919413, 10.49907903, 10.49895641, 10.4988263, \
 10.49868879, 10.49854393, 10.49839184, 10.49823269, 10.49806658, 10.49789362, \
 10.4977139,  10.49752754, 10.49733467, 10.49713542, 10.49692993, 10.49671841, \
 10.49650107, 10.49627804, 10.49604948, 10.49581555, 10.49557643, 10.49533226, \
 10.49508323, 10.49482953, 10.4945714,  10.49430905, 10.49404264, 10.49377239, \
 10.49349843, 10.49322082, 10.49294022, 10.49265632, 10.49236946, 10.49207987, \
 10.49178776, 10.49149332, 10.49119675, 10.49089818])
varlist['R100'] = np.array([10.47722998, 10.47984983, 10.48380652, 10.48887077, 10.49458094, 10.49897864, \
 10.49956851, 10.49261468, 10.47328726, 10.43646775, 10.37735486, 10.2953329, \
 10.19374991, 10.0816606,   9.97109183,  9.87489334,  9.80392867,  9.77023058, \
  9.79861995,  9.9791814,  10.57024825,  9.61015234, 10.06212059,  9.6255649, \
  9.50821617,  9.51514538,  9.6358739,   9.8728492,  10.17881546, 10.42976022, \
 10.4958497,  10.37018883, 10.15026153,  9.92466329,  9.7369934,   9.60299646, \
  9.52762916,  9.5123324,   9.55654096,  9.65667836])
varlist['R500'] = np.array([10.4357052,  10.38101094, 10.3431719,  10.34240872, 10.39493623, 10.47558958, \
 10.48940075, 10.35751199, 10.19044798, 10.16103509, 10.36703748, 10.59431082,
 10.25050249,  9.96150232, 10.21838052, 10.35076439,  9.80433067, 10.4155919,
  9.7535557,  10.45880008,  9.90355464, 10.04434547,  9.58015155,  9.50288641,
  9.84530153,  9.9730954,   9.65823231, 10.00011909,  9.86060364,  9.67892511,
 10.40233961,  9.51246983, 10.19908169, 10.02169188,  9.53763457, 10.39303082,
  9.92292233,  9.55283068, 10.37214556, 10.03702106])

print(data['turning'])
for temp in varlist:
    act = varlist[temp]
    cal = data[temp]
    cal = np.where(act==0,0,cal)
    div = np.where(act==0,1,act)
    perct = 100*sum(abs(act-cal)/div)
    print('  '+temp+': '+str(cal[0])+'   '+str(act[0])+'   '+str(int(perct))+'%')
    if perct > failtol:
        lfail = 1
print('=================')

if (lfail):
    print('  STATUS: FAIL!!!!!')
else:
    print('  STATUS: PASS')

sys.exit(0)




