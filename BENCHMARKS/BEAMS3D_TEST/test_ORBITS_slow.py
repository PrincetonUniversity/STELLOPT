#!/usr/bin/env python3
import sys, os
sys.path.insert(0, '../../pySTEL/')
import numpy as np                    #For Arrays
from math import pi
from libstell.beams3d import read_beams3d

try:
	qtCreatorPath=os.environ["STELLOPT_PATH"]
except KeyError:
	print("Please set environment variable STELLOPT_PATH")
	sys.exit(1)

lfail = 0
failtol = 70.0
filename='beams3d_ORBITS_slow.h5'
data=read_beams3d(filename)
if not data:
    print('ERROR Opening File: '+filename)
    sys.exit(0)

# Calc values
#rho = np.sqrt(data['S_lines'])
#rho_max = np.max(rho,axis=1)
#rho_min = np.min(rho,axis=1)
#data['delta'] = rho_max-rho_min
#x = data['R_lines']-10.0
#y = data['Z_lines']
#theta = np.arctan2(y,x)
#theta = np.where(theta > np.pi,theta-pi,theta)
#data['turning'] = np.max(theta,axis=1)
data['R0']=data['R_lines'][:,0]
data['R1']=data['R_lines'][:,1]
data['R100']=data['R_lines'][:,100]
#data['R500']=data['R_lines'][:,500]

print('BEAMS3D VERSION: ' + str(data['VERSION']))
print('==== Vectors ====')
varlist={}
#varlist['turning']=np.array([0.4270134,  1.30000282, 1.00853362, 0.91105419, 3.13805239, 1.28424185, \
# 0.63219703, 0.53907533, 1.86587054, 2.2327981,  2.5049937,  2.31536106, \
# 0.8311377,  0.94574217, 1.57115154, 1.53356953, 2.30289523, 1.51445262, \
# 1.42795221, 1.80855121, 3.12543453, 1.61452375, 1.85243264, 3.13577233, \
# 3.13918886, 3.13863239, 3.11512853, 3.138203,   3.13938066, 2.57006529, \
# 3.13437534, 3.14106569, 3.13746063, 3.14063411, 3.13657694, 3.12631134, \
# 3.13494179, 3.1363516,  3.13770466, 3.13370024])
#varlist['delta']= np.array([0.0634609,  0.11510263, 0.08012891, 0.12684286, 0.13316283, 0.13978225, \
# 0.07209561, 0.09396838, 0.11271003, 0.12254434, 0.13770218, 0.12489736, \
# 0.09306725, 0.09730119, 0.10413771, 0.10027177, 0.11936921, 0.12905228, \
# 0.10249505, 0.12127122, 0.12560551, 0.13547327, 0.12276697, 0.1261778, \
# 0.13144611, 0.11954146, 0.13844897, 0.13060579, 0.1422127,  0.13046484, \
# 0.12998523, 0.04811766, 0.14725451, 0.04874182, 0.04726258, 0.17453879, \
# 0.12138846, 0.14027319, 0.04648992, 0.15181176])
varlist['R0'] = np.array([10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5,\
 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, \
 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5, 10.5])
varlist['R1'] = np.array([10.49998034, 10.49998083, 10.49995251, 10.49992415, 10.49990851, 10.49984462, \
 10.49980603, 10.49973588, 10.49968429, 10.4995509,  10.4995162,  10.49943115, \
 10.499325,   10.4991896,  10.49905405, 10.49892276, 10.49889819, 10.49870158, \
 10.49855674, 10.4984658,  10.49835651, 10.49813541, 10.49800908, 10.49785829, \
 10.49756174, 10.49749525, 10.49726847, 10.4972778,  10.49688421, 10.49667486, \
 10.49650542, 10.49622502, 10.49600009, 10.49599827, 10.49568756, 10.49545829, \
 10.49512084, 10.49483571, 10.49471864, 10.4945789])
varlist['R100'] = np.array([10.500238,10.482602,10.50176 ,10.500379,10.512818,10.484189,10.469027,\
 10.504246,10.506828,10.473534,10.445454,10.485139,10.497312,10.490844,\
 10.483375,10.495042,10.407499,10.322465,10.089636,10.378809,10.217632,\
 10.021384,10.007383, 9.800641, 9.975878, 9.890933, 9.731367, 9.844628,\
 10.08246 ,10.490629, 9.517306, 9.682021,10.436759, 9.916805, 9.521169,\
  9.693064, 9.496013,10.124148, 9.624287,10.132303])
#varlist['R500'] = np.array([10.54277998, 10.57196712, 10.27044819, 10.37134606, 10.36949525, 10.36275332, \
# 10.53850064, 10.51174778, 10.06890164, 10.4471823,  10.42614472, 10.48604785, \
# 10.46567,    10.38794642, 10.00457241, 10.44508214, 10.48880624, 10.41658241, \
# 10.47249319,  9.96727961,  9.52727141, 10.28322166, 10.58856652,  9.74404286, \
#  9.70036853, 10.23995058,  9.72115835,  9.49246235, 10.51031916, 10.38976587, \
#  9.62317718, 10.07464268,  9.67119336, 10.49999564,  9.81744224, 10.04807668, \
#  9.50293593, 10.06782083,  9.98882236,  9.50144957])

for temp in varlist:
    act = varlist[temp]
    cal = data[temp]
    #print(np.array2string(cal,precision=6, separator=','))
    cal = np.where(act==0,0,cal)
    div = np.where(act==0,1,act)
    perct = 100*sum(abs(act-cal)/div)
    print('  '+temp+': '+str(cal[0])+'   '+str(act[0])+'   '+str(int(perct))+'%')
    if perct > failtol:
        lfail = 1
print('=================')

if (lfail):
    print('  STATUS: FAIL!!!!!')
else:
    print('  STATUS: PASS')

sys.exit(0)




