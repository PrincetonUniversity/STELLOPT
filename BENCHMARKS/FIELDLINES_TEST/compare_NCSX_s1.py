#!/usr/bin/env python3
import sys, os
sys.path.insert(0, '../../pySTEL/')
import numpy as np                    #For Arrays
from math import pi
from libstell.fieldlines import FIELDLINES

lfail = 0
failtol = 1.0
filename='fieldlines_NCSX_s1.h5'
fld = FIELDLINES()
fld.read_fieldlines(filename)

# Calc values
data = {}
data['iota0'] = fld.iota0
[_,data['iota'],_] = fld.calc_iota()


print(f'FIELDLINES VERSION: {fld.VERSION:4.2f}')
print('==== Scalars ====')
varlist={}
varlist['iota0']=0.1410238051304572
lfail = 0;
for temp in varlist:
    act = varlist[temp]
    cal = data[temp]
    perct = 100*(abs(act-cal)/act)
    print('  '+temp+': '+str(cal)+'   '+str(act)+'   '+str(int(perct))+'%')
    if perct > failtol:
        lfail = 1        
print('==== Vectors ====')
varlist={}
varlist['iota']=np.array([[ 0.14018862], [ 0.1405419 ], [ 0.14089518], [ 0.14146037], [0.14251876], [ 0.14398264], [ 0.14582902], [ 0.14788358], \
 [0.15002786], [ 0.1523993 ], [ 0.154785  ], [ 0.15717504], [0.15968754], [ 0.16216067], [ 0.1646967 ], [ 0.1671161 ], \
 [0.16968349], [ 0.17208011], [ 0.17447306], [ 0.17686855], [0.17920198], [ 0.18148378], [ 0.18375362], [ 0.18597824], \
 [0.18793333], [ 0.19021549], [ 0.19230822], [ 0.19435355], [0.19634761], [ 0.1983217 ], [ 0.199992  ], [ 0.20207096], \
 [0.20388092], [ 0.20570541], [ 0.20744672], [ 0.20916366], [0.21089245], [ 0.21254412], [ 0.21429243], [ 0.21565329], \
 [0.21723609], [ 0.21877294], [ 0.22022564], [ 0.22168049], [0.22307697], [ 0.22447065], [ 0.22584008], [ 0.22718836], \
 [0.22850251], [ 0.22982753], [ 0.2307531 ], [ 0.23225573], [0.23349887], [ 0.23470675], [ 0.23588253], [ 0.23702374], \
 [0.23814263], [ 0.23922661], [ 0.24040359], [ 0.24144835], [0.24248898], [ 0.24345146], [ 0.2445022 ], [ 0.24551991], \
 [0.24652023], [ 0.2474835 ], [ 0.248511  ], [ 0.25000793], [0.24999921], [ 0.25086518], [ 0.25190757], [ 0.25283443], \
 [0.25372666], [ 0.25461038], [ 0.25547419], [ 0.25632857], [0.25714207], [ 0.25798054], [ 0.25883837], [ 0.25964557], \
 [0.26049643], [ 0.26086297], [ 0.26197147], [ 0.26277447], [0.26358034], [ 0.26437371], [ 0.2650037 ], [ 0.26575691], \
 [0.26655808], [ 0.26732669], [ 0.26805694], [ 0.26865635], [0.26950933], [ 0.27020881], [ 0.27086955], [ 0.27153261], \
 [0.27316181], [ 0.27368398], [ 0.27435917], [ 0.27499967], [0.27567564], [ 0.27631521], [ 0.27710839], [ 0.27777729], \
 [0.27847746], [ 0.27933393], [ 0.27999966], [ 0.28077406], [0.28124918], [ 0.28204508], [ 0.28282714], [ 0.28359388], \
 [0.28437538], [ 0.28572164], [ 0.28571422], [ 0.28570823], [0.28708166], [ 0.28787838], [ 0.28870789], [ 0.28942211], \
 [0.29032239], [ 0.29076937], [ 0.29149768], [ 0.29241877], [0.29296466], [ 0.29421991], [-0.07873187], [-0.13739811]])
for temp in varlist:
    act = np.squeeze(varlist[temp])
    cal = data[temp]
    cal = np.where(act==0,0,cal)
    div = np.where(act==0,1,act)
    perct = 100*sum(abs(act-cal)/div)
    print(f'  Quantity: {temp} -- CODE -- REF. -- %')
    for i in range(len(act)):
        perct = 100*abs(act[i]-cal[i])/div[i]
        print(f'  {i} {cal[i]:7.6f} {act[i]:7.6f} {round(perct)}')
        if perct > failtol:
            lfail = 1
print('=================')

if (lfail):
    print('  STATUS: FAIL!!!!!')
    sys.exit(-1)
else:
    print('  STATUS: PASS')
    sys.exit(0)

