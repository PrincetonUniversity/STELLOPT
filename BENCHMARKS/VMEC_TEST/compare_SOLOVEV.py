#!/usr/bin/env python3
import sys, os
sys.path.insert(0, '../../pySTEL/')
import numpy as np                    #For Arrays
from math import pi
from libstell.libstell import read_vmec

try:
	qtCreatorPath=os.environ["STELLOPT_PATH"]
except KeyError:
	print("Please set environment variable STELLOPT_PATH")
	sys.exit(1)
failtol = 1.0
filename='wout_SOLOVEV.nc'
data=read_vmec(filename)
if not data:
    print('ERROR Opening File: '+filename)
    sys.exit(0)
else:
    print('EXTENSION: '+filename)
print('==== Scalars ====')
varlist={}
varlist['aspect']=3.117998343734717
varlist['b0']=0.20333912528516748
#varlist['wp']=1.0E-3
#varlist['betatot']=1.0E-3
varlist['volume']=126.87192764523486
lfail = 0;
for temp in varlist:
    act = varlist[temp]
    cal = data[temp]
    perct = 100*(abs(act-cal)/act)
    print('  '+temp+': '+str(cal)+'   '+str(act)+'   '+str(int(perct))+'%')
    if perct > failtol:
        lfail = 1
print('==== Vectors ====')
varlist={}

#print(data['jcurv'].tolist())

varlist['iotaf']=np.array
varlist['presf']=np.array([[0.125], [0.12401574803149606], [0.12303149606299213], [0.1220472440944882], [0.12106299212598426], [0.12007874015748032], [0.11909448818897639], [0.11811023622047245], [0.1171259842519685], [0.11614173228346457], [0.11515748031496063], [0.11417322834645668], [0.11318897637795275], [0.11220472440944881], [0.11122047244094488], [0.11023622047244093], [0.109251968503937], [0.10826771653543306], [0.10728346456692912], [0.10629921259842519], [0.10531496062992128], [0.10433070866141732], [0.10334645669291338], [0.10236220472440945], [0.10137795275590551], [0.10039370078740158], [0.09940944881889764], [0.0984251968503937], [0.09744094488188977], [0.09645669291338584], [0.09547244094488189], [0.09448818897637795], [0.09350393700787402], [0.09251968503937008], [0.09153543307086615], [0.09055118110236221], [0.08956692913385828], [0.08858267716535434], [0.0875984251968504], [0.08661417322834646], [0.08562992125984252], [0.08464566929133858], [0.08366141732283464], [0.0826771653543307], [0.08169291338582677], [0.08070866141732283], [0.0797244094488189], [0.07874015748031496], [0.07775590551181102], [0.07677165354330709], [0.07578740157480315], [0.07480314960629922], [0.07381889763779528], [0.07283464566929133], [0.0718503937007874], [0.07086614173228346], [0.06988188976377951], [0.0688976377952756], [0.06791338582677166], [0.06692913385826771], [0.06594488188976379], [0.06496062992125985], [0.0639763779527559], [0.06299212598425197], [0.06200787401574803], [0.0610236220472441], [0.06003937007874016], [0.05905511811023623], [0.05807086614173228], [0.05708661417322834], [0.05610236220472441], [0.055118110236220465], [0.05413385826771653], [0.053149606299212594], [0.05216535433070867], [0.05118110236220473], [0.05019685039370079], [0.04921259842519685], [0.04822834645669292], [0.047244094488188976], [0.04625984251968504], [0.045275590551181105], [0.04429133858267717], [0.043307086614173235], [0.04232283464566929], [0.04133858267716535], [0.040354330708661415], [0.03937007874015748], [0.038385826771653545], [0.0374015748031496], [0.03641732283464567], [0.03543307086614174], [0.0344488188976378], [0.033464566929133854], [0.03248031496062992], [0.031496062992125984], [0.03051181102362205], [0.029527559055118113], [0.02854330708661418], [0.027559055118110232], [0.026574803149606287], [0.02559055118110235], [0.024606299212598427], [0.02362204724409448], [0.022637795275590546], [0.021653543307086617], [0.020669291338582675], [0.01968503937007874], [0.018700787401574805], [0.017716535433070862], [0.016732283464566927], [0.015748031496062985], [0.014763779527559048], [0.013779527559055123], [0.012795275590551181], [0.011811023622047244], [0.010826771653543309], [0.009842519685039366], [0.008858267716535424], [0.007874015748031489], [0.0068897637795275616], [0.0059055118110236185], [0.004921259842519683], [0.003937007874015755], [0.0029527559055118123], [0.0019685039370078636], [0.0009842519685039283], [6.911618874173803e-18]])
varlist['jcurv']=np.array([[-69540.60354006401], [-69549.41560381197], [-69558.22766755993], [-69565.60047394055], [-69573.35516327566], [-69581.02459228045], [-69588.66553748763], [-69596.28059480485], [-69603.91158980592], [-69611.64481661776], [-69619.45789558116], [-69627.31139883604], [-69635.20492311272], [-69643.13631685394], [-69651.10651605131], [-69659.11937449196], [-69667.17639410391], [-69675.27359617442], [-69683.4138776409], [-69691.5943728451], [-69699.81634874994], [-69708.08087451143], [-69716.38644110523], [-69724.73325048429], [-69733.1231710536], [-69741.55443555591], [-69750.02836201187], [-69758.5446109008], [-69767.10358089747], [-69775.70509125703], [-69784.34944232983], [-69793.0372924113], [-69801.76788291942], [-69810.54295109343], [-69819.36074614347], [-69828.22381435307], [-69837.12954962789], [-69846.08106750729], [-69855.0753226257], [-69864.11561766324], [-69873.19901541935], [-69882.3285554233], [-69891.50191817568], [-69900.7214210521], [-69909.98571680079], [-69919.2960417399], [-69928.65219546418], [-69938.05417224116], [-69947.50290644326], [-69956.99724717307], [-69966.53908363644], [-69976.12643121928], [-69985.76181710615], [-69995.4428703452], [-70005.172332418], [-70014.947919431], [-70024.77213526766], [-70034.6431849319], [-70044.56294836864], [-70054.53038511334], [-70064.54652053361], [-70074.61115356957], [-70084.72445393233], [-70094.88693768089], [-70105.09816467973], [-70115.35904599188], [-70125.66898300152], [-70136.02879110468], [-70146.43830394091], [-70156.89763338001], [-70167.40768513855], [-70177.96722869077], [-70188.57883612273], [-70199.23937599309], [-70209.95352562214], [-70220.71589819771], [-70231.53347316799], [-70242.39853699518], [-70253.32027811655], [-70264.28892483607], [-70275.31544246283], [-70286.38862491577], [-70297.52043868338], [-70308.69921354615], [-70319.93681019994], [-70331.2223463568], [-70342.56622921233], [-70353.95978777757], [-70365.41049866336], [-70376.91338012753], [-70388.47151215514], [-70400.08497931702], [-70411.75118849822], [-70423.4764043072], [-70435.25142863767], [-70447.0893984465], [-70458.97409328257], [-70470.92566789918], [-70482.9210625875], [-70494.98685446724], [-70507.09415192527], [-70519.27488243459], [-70531.49529594177], [-70543.79102235749], [-70556.12674902753], [-70568.53791260015], [-70580.9892770445], [-70593.51708471819], [-70606.08672229966], [-70618.72958528834], [-70631.41983736173], [-70644.17962207372], [-70656.98910756153], [-70669.86947806954], [-70682.79987914432], [-70695.79432409658], [-70708.86029195655], [-70721.96020489262], [-70735.15921937642], [-70748.37314770577], [-70761.70752181734], [-70775.02802739505], [-70788.49765803252], [-70801.93889874409], [-70815.53902027718], [-70829.11816495894], [-70842.8022040531], [-70856.48624314729]])
for temp in varlist:
    act = varlist[temp]
    cal = data[temp]
    perct = 100*sum(abs(act-cal)/act)
    print('  '+temp+': '+str(cal[0])+'   '+str(act[0])+'   '+str(int(perct))+'%')
    if perct > failtol:
        lfail = 1
print('==== Arrays =====')
varlist={}
varlist['rmnc']=np.array([0.3584289616322687, 0.5080163275511583,0.7216832114318956])
varlist['zmns']=np.array([0.5525630608496462,0.7830755179385153,1.1121214764107088])
varlist['lmns']=np.array([-0.12510562883254683,-0.17778788990211195,-0.2539937485501273])
varlist['bmnc']=np.array([-0.0182204735758721,-0.02576028351528621,-0.036410403771247164])
for temp in varlist:
    mn  = 1; k   = 16
    act = varlist[temp][0]
    cal = data[temp][k,mn]
    s   = str(k)
    m   = str(int(data['xm'][mn]))
    n   = str(int(data['xn'][mn]))
    perct = 100*abs((act-cal)/act)
    print('  '+temp+'['+s+','+m+','+n+']: '+str(cal)+'   '+str(act)+'   '+str(int(perct))+'%')
    if perct > failtol:
        lfail = 1
    mn  = 1; k   = 32
    act = varlist[temp][1]
    cal = data[temp][k,mn]
    s   = str(k)
    m   = str(int(data['xm'][mn]))
    n   = str(int(data['xn'][mn]))
    perct = 100*abs((act-cal)/act)
    print('  '+temp+'['+s+','+m+','+n+']: '+str(cal)+'   '+str(act)+'   '+str(int(perct))+'%')
    if perct > failtol:
        lfail = 1
    mn  = 1; k   = 64
    act = varlist[temp][2]
    cal = data[temp][k,mn]
    s   = str(k)
    m   = str(int(data['xm'][mn]))
    n   = str(int(data['xn'][mn]))
    perct = 100*abs((act-cal)/act)
    print('  '+temp+'['+s+','+m+','+n+']: '+str(cal)+'   '+str(act)+'   '+str(int(perct))+'%')
    if perct > failtol:
        lfail = 1
print('=================')

if (lfail):
    print('  STATUS: FAIL!!!!!')
else:
    print('  STATUS: PASS')

sys.exit(0)




