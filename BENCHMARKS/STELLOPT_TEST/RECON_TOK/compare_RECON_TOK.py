#!/usr/bin/env python3
import sys, ossys.path.insert(0, '../../../pySTEL/')
import numpy as np                    #For Arrays
from math import pi
from libstell.stellopt import read_stellopt

try:
	qtCreatorPath=os.environ["STELLOPT_PATH"]
except KeyError:
	print("Please set environment variable STELLOPT_PATH")
	sys.exit(1)

failtol = 1.0
filename='stellopt.RECON_TOK'
data=read_stellopt(filename)
if not data:
    print('ERROR Opening File: '+filename)
    sys.exit(0)
else:
    print('EXTENSION: '+filename)
print('==== Scalars ====')
varlist={}
varlist['CURTOR_equil']=1389148.172383
lfail = 0;
for temp in varlist:
    act = varlist[temp]
    cal = data[temp]
    perct = 100*(abs(act-cal)/act)
    print('  '+temp+': '+str(cal)+'   '+str(act)+'   '+str(int(perct))+'%')
    if perct > failtol:
        lfail = 1
print('==== Vectors ====')
varlist={}

varlist['NELINE_equil']=np.array([4.627288291389e+19, 4.255509503065e+19, 4.400797070505e+19])
varlist['NE_equil']=np.array([0.2473143899745, 0.4878145057868, 0.6184587727933, 0.6905387381642, 0.7246423073782, 0.7316480612321, 0.7115887055184, 0.6744062957313, 0.6456336047964, 0.6501305003621, 0.6708246503713, 0.6941857468459, 0.7201374871592, 0.7486972341763, 0.7901238919267, 0.8677507334325, 0.8486834074905, 0.855089974787, 0.8405525059789, 0.8722294875846, 0.8901199827951, 0.9212185367203, 0.9675415322519, 0.9921026157743, 0.9896405798145, 0.9895222566784, 1.013195887818, 1.002641541961, 1.001214490368, 1.004181414883])
varlist['TE_equil']=np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 96.3631441879, 356.060943691, 552.6692317995, 607.4489479496, 657.1689922803, 702.058705885, 750.5611713505, 797.5123423938, 845.9617477622, 887.4006472902, 914.5933137675, 930.316492668, 951.4418117634, 989.2864446875, 1051.91406332, 1183.100475582, 1304.771546067, 1431.886879922, 1397.532860543, 1490.189282307, 1589.016809176, 1830.705211636, 2167.005075303, 2339.265095628, 2320.736845635, 2319.856779788, 2791.005756724, 4007.679070503, 4107.530268371, 3897.387018773])
varlist['TI_equil']=np.array([3875.968992912, 3211.818245067, 2664.340403514, 2259.74997237, 1840.153937867, 1422.1244813, 1134.319100364, 1088.687232235, 848.2251555484, 3497.73806627, 2900.648310246, 2429.657047235, 1874.020097765, 1604.040780951, 1241.292585481, 967.6302288593, 513.6350759612])
varlist['MSE_equil']=np.array([0.1285056619847, 0.1021783165234, 0.07262839494605, 0.03737105128373, -0.002972076345939, -0.04699884857648, -0.08859499729489, -0.1281815481497, -0.1640087312448, -0.1946772745603, -0.2225237179078, 0.1856417098539, 0.1983263726111, 0.2027627482158, 0.201253371293, 0.1977523362301, 0.1899939156579, 0.1762334304085, 0.1757608463005, -0.03927544538948, 0.006471234446736, 0.05005322699577, 0.08683068239291, 0.1178298087091, 0.1414860507654, 0.16304400088, 0.1621215487052, 0.1488894594265, -0.2421134983449, -0.2557468806237, -0.2679366894508, -0.2692124500261])
varlist['B_PROBES_equil']=np.array([0.6152806070259, 0.4967843194802, 0.5997123390043, 0.5001167140558, -1.396475860326, 2.16761540459, 2.182166062137, 2.175583639781, 0.5843317768005, 0.5876973779339, 0.5683910245531, -0.7853979422976, -0.7817924037596, -0.8060154514545, -1.662945079056, -1.696991004135, -1.772351893968, -2.392594286102, -2.432509728057, -2.481178539182, -2.672074805564, -2.733275205533, -1.766084256844, -1.778382521978, -1.796946533006, 0.2956183564448, 2.422313693286, 2.537220777529, 2.670600288953, 2.790575718724, 2.830864560401, 2.824902942959, 2.750143033382, 2.61278366318, 2.504526349585, 3.315772683074, -3.025071227661, -3.022571990076, -1.785181887945, -1.968674787753, 1.407801326573, -2.042161927234, 2.544174250742, 2.137918726286, 2.156085908793, 2.148733866377, -1.465714777694, -1.429824334514, -0.3736726442401, 1.857543596142, 0.7364230072275, -2.17030851316, -1.846059209546, -1.82178671744, -1.789144348455, -1.744588113496, -1.739034242229, -1.70018056343, -1.660090019541, -1.645420594415, -1.605710714979, -1.566184620276, -1.071190910124, -2.006414373952, -2.370059158787, -1.765669060277])
varlist['FLUXLOOPS_equil']=np.array([1.313302924857, 1.157583126798, 0.930501781404, 0.6948655755259, 0.6885116337799, 3.479166572914, 0.0, 0.8988355742767, 1.409546432085, 1.318605027162, 1.15873453021, 0.9238835941069, 0.6950763962232, 0.6901590828784, 3.479485819116, 2.572874059901, 0.8949745241553, 1.421644732356, 1.449571549892, 1.353180173784, 1.121211892925, 0.8569091400132, 0.7090866663493, 0.8132792650722, 1.489141125232, 2.208331927657, 2.481973579153, 3.254720667377, 3.399432403967, 1.353179942816, 1.121211827733, 0.8569092615508, 0.7083878028207, 0.8132907012478, 1.627633269876, 2.207647047937, 2.487248528749, 3.258916456252, 3.401132080704, 1.143504630309, 1.369192527607, 1.352268009447, 1.624484975822, 1.811950316653, 0.02343936730176, 0.02344665478449, 0.01173989288509, 0.001545040868223, -0.006812680978328, 0.0, -0.01956719858572, -0.02466633683071, 0.04483192274347, 0.05818351404741, 0.04892034921795, 0.0, -0.04723482811823, -0.05029175849631, -0.05408468097448, 0.02467681700364, 0.01957791531458, -0.01956562558189, -0.02467062929645, 0.04527968820184, 0.05847912002355, 0.04974036943167, 0.0002666153013706, -0.04896221403033, -0.05084964679554, -0.05430540861562, 0.02467548195273, 0.019571098499, 0.02898778626695, 0.005755222402513, 0.01029967190698, -0.01033207774162, 0.01006228802726, -0.01007476169616, -0.004129605833441, -0.02067823335528, 4.5545399189e-05, 5.932152271271e-05, 5.276687443256e-05, 4.544761031866e-05, 0.0, 5.224999040365e-05, 9.48179513216e-06, 2.407934516668e-05, 1.631863415241e-05, 0.0, 2.407282590866e-05, 1.641176640987e-05, 0.1195011357777, 0.09474129322916, 0.1385368225165, 0.1165383337066, 0.09474130067974, 0.1355516868643, -0.1159480465576, -0.09471861459315, -0.1385292327031, -0.1165396096185, -0.09471859689802, -0.1391269471496])
varlist['SEPARATRIX_equil']=np.array([0.007096406495244, 0.1014889451255])

#print(data['SEPARATRIX_equil'].tolist())
for temp in varlist:
    act = varlist[temp]
    cal = data[temp]
    perct = 100*sum(abs(act-cal)/max(abs(act)))
    print('  '+temp+': '+str(max(cal))+'   '+str(max(act))+'   '+str(int(perct))+'%')
    if perct > failtol:
        lfail = 1
print('=================')

if (lfail):
    print('  STATUS: FAIL!!!!!')
else:
    print('  STATUS: PASS')

sys.exit(0)




