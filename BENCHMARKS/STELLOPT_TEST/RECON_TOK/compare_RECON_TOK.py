#!/usr/bin/env python3
import sys, os
sys.path.insert(0, '../../../pySTEL/')
import numpy as np                    #For Arrays
from math import pi
from libstell.stellopt import read_stellopt

try:
	qtCreatorPath=os.environ["STELLOPT_PATH"]
except KeyError:
	print("Please set environment variable STELLOPT_PATH")
	sys.exit(1)

failtol = 5.0
filename='stellopt.RECON_TOK'
data=read_stellopt(filename)
if not data:
    print('ERROR Opening File: '+filename)
    sys.exit(0)

print('STELLOPT_VERSION: ' + str(data['VERSION']))
print('==== Scalars ====')
varlist={}
varlist['CURTOR_equil']=1.389148172383E+006
#print(data)
lfail = 0;
for temp in varlist:
    act = varlist[temp]
    cal = data[temp]
    perct = 100*(abs(act-cal)/act)
    print('  '+temp+': '+str(cal)+'   '+str(act)+'   '+str(int(perct))+'%')
    if perct > failtol:
        lfail = 1


print('==== Vectors ====')
varlist={}

print(repr(data['SEPARATRIX_equil']))

varlist['XICS_BRIGHT_equil']=np.array([343.98692425, 344.7443,     346.97243891, 350.53233674, 355.17903401, \
 360.5546112,  366.18437659, 371.46896176, 375.67504637, 377.94230007, \
 377.31129416, 372.79147954, 363.50406125, 348.98160525, 330.14520108, \
 309.31521787, 286.74842821, 262.4816563,  236.61908959, 209.38406289, \
 181.3060784,  153.00076721, 124.7154621,   96.68114798,  68.9554765, \
  41.24595679])
varlist['XICS_equil']=np.array([2696.81734382, 2695.06423501, 2689.54506166, 2679.52262385,
       2663.92703479, 2641.59080807, 2611.53177669, 2573.23940387,
       2526.9433534 , 2473.81542771, 2416.00568346, 2356.29895878,
       2296.71513288, 2233.54744075, 2164.78636224, 2093.11590398,
       2018.94829678, 1942.17487542, 1861.5317244 , 1779.6407542 ,
       1704.69661612, 1644.61053405, 1598.29717713, 1555.56398447,
       1511.04213286, 1458.385343  ])
varlist['XICS_W3_equil']=np.array([0.23715788, 0.23776453, 0.2395927 , 0.24266425, 0.24700569,
       0.25263606, 0.25954181, 0.26763146, 0.2766502 , 0.28605022,
       0.29481939, 0.30138069, 0.30398224, 0.30270051, 0.2986845 ,
       0.29326553, 0.2865379 , 0.27839688, 0.26859545, 0.25586998,
       0.23811462, 0.21322361, 0.18082623, 0.1441176 , 0.10576884,
       0.066104  ])
varlist['XICS_V_equil']=np.array([-1.41610840e-04,  2.42276755e+02,  4.80561378e+02,  7.13741091e+02,
        9.40970075e+02,  1.16157923e+03,  1.37494125e+03,  1.57996408e+03,
        1.77490819e+03,  1.95740965e+03,  2.12445484e+03,  2.27246910e+03,
        2.39765905e+03,  2.49640538e+03,  2.56731781e+03,  2.61236826e+03,
        2.63016045e+03,  2.61864742e+03,  2.57559803e+03,  2.49854961e+03,
        2.38546768e+03,  2.23504684e+03,  2.04560484e+03,  1.81569549e+03,
        1.54154701e+03,  1.20696598e+03])
varlist['TE_equil']=np.array([   0.        ,    0.        ,    0.        ,    0.        ,
          0.        ,    0.        ,   96.36314418,  356.06094368,
        552.6692318 ,  607.44894795,  657.16899228,  702.05870588,
        750.56117135,  797.51234239,  845.96174776,  887.40064729,
        914.59331377,  930.31649267,  951.44181176,  989.28644469,
       1051.91406332, 1183.10047558, 1304.77154607, 1431.88687992,
       1397.53286054, 1490.18928231, 1589.01680918, 1830.70521164,
       2167.0050753 , 2339.26509563, 2320.73684564, 2319.85677979,
       2791.00575672, 4007.6790705 , 4107.53026837, 3897.38701877])
varlist['NE_equil']=np.array([0.24731439, 0.48781451, 0.61845877, 0.69053874, 0.72464231,
       0.73164806, 0.71158871, 0.6744063 , 0.6456336 , 0.6501305 ,
       0.67082465, 0.69418575, 0.72013749, 0.74869723, 0.79012389,
       0.86775073, 0.84868341, 0.85508997, 0.84055251, 0.87222949,
       0.89011998, 0.92121854, 0.96754153, 0.99210262, 0.98964058,
       0.98952226, 1.01319589, 1.00264154, 1.00121449, 1.00418141])
varlist['TI_equil']=np.array([3875.96899291, 3211.81824507, 2664.34040351, 2259.74997237,
       1840.15393787, 1422.1244813 , 1134.31910036, 1088.68723224,
        848.22515555, 3497.73806627, 2900.64831025, 2429.65704724,
       1874.02009776, 1604.04078095, 1241.29258548,  967.63022886,
        513.63507596])
varlist['B_PROBES_equil']=np.array([0.61528061, 0.49678432, 0.59696116, 0.49752313, 0.13479408,
       0.12752208, 0.14039405, 0.14351249, 0.06744402, 0.091959  ,
       0.11033335, 0.08312169, 0.10443987, 0.12205791, 0.13492239,
       0.15147485, 0.13562844, 0.12460492, 0.10631908, 0.0864335 ,
       0.08349707, 0.0444015 , 0.14068577, 0.14151995, 0.12950813,
       0.23303338, 0.26483022, 0.36623986, 0.49940846, 0.59736453,
       0.61538615, 0.59834132, 0.4996244 , 0.36793077, 0.26416521,
       0.23423426, 0.03552809, 0.05529867, 0.21168383, 0.18561059,
       0.23836234, 0.14040625, 0.32184752, 0.16593852, 0.16542479,
       0.16048221, 0.16201183, 0.16589334, 0.16593066, 0.16380187,
       0.16672336, 0.16686287, 0.1528232 , 0.15295074, 0.15280213,
       0.1519738 , 0.15293425, 0.1529128 , 0.15278038, 0.15280698,
       0.15342757, 0.15288912, 0.10293131, 0.10319056, 0.10250021,
       0.10393961, 0.10263341, 0.10336062, 0.10431716, 0.10510954,
       0.10519171, 0.10491829, 0.10402792, 0.10489673])
varlist['FLUXLOOPS_equil']=np.array([-1.31330292e+00, -1.15758313e+00, -9.25216391e-01, -6.90754920e-01,
       -6.84442614e-01, -3.46353754e+00,  0.00000000e+00, -8.93593068e-01,
       -1.40170092e+00, -1.31218615e+00, -1.15271122e+00, -9.18631695e-01,
       -6.90963361e-01, -6.86081640e-01, -3.46385189e+00, -2.56016923e+00,
       -8.89755012e-01, -1.41372659e+00, -1.44259962e+00, -1.34643675e+00,
       -1.11508747e+00, -8.51873163e-01, -7.04872090e-01, -8.08472285e-01,
       -1.48083786e+00, -2.19709414e+00, -2.46948509e+00, -3.23978747e+00,
       -3.38392923e+00, -1.34643646e+00, -1.11508747e+00, -8.51873101e-01,
       -7.04177432e-01, -8.08482991e-01, -1.61880207e+00, -2.19641988e+00,
       -2.47473688e+00, -3.24396908e+00, -3.38562025e+00, -1.13682717e+00,
       -1.36140248e+00, -1.34417953e+00, -1.61513332e+00, -1.80193509e+00,
        2.33074378e-02,  2.33271976e-02,  1.17180790e-02,  1.54362316e-03,
       -6.75740559e-03,  0.00000000e+00, -1.95168853e-02, -2.45514899e-02,
        4.45973035e-02,  5.79388044e-02,  4.87592756e-02,  0.00000000e+00,
       -4.70797545e-02, -5.00764949e-02, -5.38119045e-02,  2.45619523e-02,
        1.95283988e-02, -1.95153845e-02, -2.45562065e-02,  4.50423830e-02,
        5.82330534e-02,  4.95763128e-02,  2.65221111e-04, -4.88011166e-02,
       -5.06321541e-02, -5.40322405e-02,  2.45610424e-02,  1.95208774e-02,
        2.88885962e-02,  5.73954545e-03,  1.02696884e-02, -1.03022167e-02,
        1.00328997e-02, -1.00455424e-02, -4.11842647e-03, -2.06074952e-02,
        4.54448164e-05,  5.85205853e-05,  5.25116920e-05,  4.45330516e-05,
        0.00000000e+00,  5.22863120e-05,  1.06552616e-05,  2.40467489e-05,
        1.60858035e-05,  0.00000000e+00,  2.40439549e-05,  1.67628750e-05,
        1.19125170e-01,  9.44439783e-02,  1.38101530e-01,  1.16172334e-01,
        9.44439848e-02,  1.35125886e-01, -1.15583774e-01, -9.44209872e-02,
       -1.38094154e-01, -1.16173546e-01, -9.44209620e-02, -1.38689586e-01])
varlist['MSE_equil']=np.array([ 1.42384177e-17,  1.02178317e-01,  7.26283949e-02,  3.73710513e-02,
       -2.97207635e-03,  0.00000000e+00, -8.85949973e-02, -1.28181548e-01,
       -1.64008731e-01, -1.94677275e-01, -2.22523718e-01,  1.85641710e-01,
        1.98326373e-01,  2.02762748e-01,  2.01253371e-01, -0.00000000e+00,
        1.89993916e-01,  1.76233430e-01,  1.75760846e-01, -1.48657858e-18,
        6.47123445e-03, -0.00000000e+00,  8.68306824e-02,  1.17829809e-01,
        1.41486051e-01, -0.00000000e+00,  1.62121549e-01, -0.00000000e+00,
       -2.42113498e-01, -2.55746881e-01, -2.67936689e-01, -2.69212450e-01])
varlist['SEPARATRIX_equil']=np.array([-0.00709641,  0.10148895])
for temp in varlist:
    act = varlist[temp]
    cal = data[temp]
    cal = np.where(act==0,0,cal)
    div = np.where(act==0,1,act)
    perct = 100*sum(abs(act-cal)/div)
    print('  '+temp+': '+str(cal[0])+'   '+str(act[0])+'   '+str(int(perct))+'%')
    if perct > failtol:
        lfail = 1
print('=================')

if (lfail):
    print('  STATUS: FAIL!!!!!')
else:
    print('  STATUS: PASS')

sys.exit(0)




