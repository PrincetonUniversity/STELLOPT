# makefile for NERSC Edison and Cori
# You must first load the cray-netcdf module and python module:
#   module load cray-netcdf python
# It is convenient to run
#   module unload cray-libsci
# to avoid warning messages about libsci during compiling.

#LIBSTELL_DIR = mini_libstell
#LIBSTELL_FOR_REGCOIL=$(LIBSTELL_DIR)/mini_libstell.a
LIBSTELL_DIR=/p/gs2/mynick/Stellopt18/stellopt/LIBSTELL/Release     #hm-10/30/18.(7g)
LIBSTELL_FOR_REGCOIL=/p/gs2/mynick/Stellopt18/stellopt/LIBSTELL/Release/libstell.a #10/30/18.(7g)

ifdef NERSC_HOST
        HOSTNAME = $(NERSC_HOST)
else
        HOSTNAME?="laptop"
endif

HOSTNAME=pppl

ifeq ($(HOSTNAME),edison)
	FC = ftn
	## NERSC documentation recommends against specifying -O3
	## -mkl MUST APPEAR AT THE END!!
	EXTRA_COMPILE_FLAGS = -openmp -mkl
	EXTRA_LINK_FLAGS =  -openmp -mkl -Wl,-ydgemm_
	# Above, the link flag "-Wl,-ydgemm_" causes the linker to report which version of DGEMM (the BLAS3 matrix-matrix-multiplication subroutine) is used.
	# For batch systems, set the following variable to the command used to run jobs. This variable is used by 'make test'.
	REGCOIL_COMMAND_TO_SUBMIT_JOB = srun -n 1 -c 24

else ifeq ($(HOSTNAME),cori)
	FC = ftn
	## NERSC documentation recommends against specifying -O3
	## -mkl MUST APPEAR AT THE END!!
	EXTRA_COMPILE_FLAGS = -qopenmp -mkl
	EXTRA_LINK_FLAGS =  -qopenmp -mkl -Wl,-ydgemm_
	# Above, the link flag "-Wl,-ydgemm_" causes the linker to report which version of DGEMM (the BLAS3 matrix-matrix-multiplication subroutine) is used.
	# For batch systems, set the following variable to the command used to run jobs. This variable is used by 'make test'.
	REGCOIL_COMMAND_TO_SUBMIT_JOB = srun -n 1 -c 32

else ifeq ($(HOSTNAME),pppl)
	NETCDF_F = /usr/pppl/gcc/6.1-pkgs/netcdf-fortran-4.4.4
	NETCDF_C = /usr/pppl/gcc/6.1-pkgs/netcdf-c-4.4.1
	FC = mpifort
#	EXTRA_COMPILE_FLAGS = -O2 -ffree-line-length-none -fexternal-blas -fopenmp -I$(NETCDF_F)/include -I$(NETCDF_C)/include
	EXTRA_COMPILE_FLAGS = -g -ffree-line-length-none -fexternal-blas -fopenmp -I$(NETCDF_F)/include -I$(NETCDF_C)/include    #HM-11/1/18.debug option.
	EXTRA_LINK_FLAGS =  -fopenmp -L$(ACML_HOME)/lib -lacml -L$(NETCDF_C)/lib -lnetcdf -L$(NETCDF_F)/lib -lnetcdff
	REGCOIL_COMMAND_TO_SUBMIT_JOB = srun -n 1 -c 32
#	LIBSTELL_DIR=/u/slazerso/bin/libstell_dir          #hm-10/9/18.(5l4)
#	LIBSTELL_FOR_REGCOIL=/u/slazerso/bin/libstell.a    #hm-10/9/18.(5l4)
	LIBSTELL_DIR=/p/gs2/mynick/Stellopt18/stellopt/LIBSTELL/Release     #hm-10/18/18.(6e10)
	LIBSTELL_FOR_REGCOIL=/p/gs2/mynick/Stellopt18/stellopt/LIBSTELL/Release/libstell.a #10/18/18.(6e10)
	REGCOIL_COMMAND_TO_SUBMIT_JOB = srun -N 1 -n 1 -c 8 -p dawson
else
	FC = mpif90
	#EXTRA_COMPILE_FLAGS = -fopenmp -I/opt/local/include -ffree-line-length-none -cpp
	EXTRA_COMPILE_FLAGS = -fopenmp -I/opt/local/include -ffree-line-length-none
	EXTRA_LINK_FLAGS =  -fopenmp -L/opt/local/lib -lnetcdff  -lnetcdf -framework Accelerate

	# For batch systems, set the following variable to the command used to run jobs. This variable is used by 'make test'.
	REGCOIL_COMMAND_TO_SUBMIT_JOB =
endif


# End of system-dependent variable assignments

#TARGET = quasisymmetry
TARGET = xqsc

export

.PHONY: all clean

all: $(TARGET)

SPATH   = ../Sources
#include makefile.depend
#include ../makefile.depend   #out-10/6/18.back-10/7.

# HM-10/6/18.divide MLandr's QSC/makefile.depend into QSC/Release/QSC.dep
# & QSC/Objectlist, as in NEO,PENTA, etc.
##Contains list of source files (.o) and dependencies
DEPLIST = QSC.dep
OBJLIST = ../ObjectList 
#-HM-10/6/18.chg OBJLIST -> makefile.depend OBJ_FILES? 
# HM-10/9/18. NO.cf (5l4). is OBJ_FILES -> ObjectFiles
#Includes source files and dependency list
#include $(DEPLIST)  #JB-11/1/18.out
include $(OBJLIST)
#VPATH = $(SPATH)

.SUFFIXES : .f .f90

#%.o: %.f $(LIBSTELL_DIR)/mini_libstell.a
#%.o: %.f $(LIBSTELL_DIR)/libstell.a     #10/30/18.(7g)
.f.o:
	@echo "HM. makeqsc/.f"
	$(FC) $(EXTRA_COMPILE_FLAGS) -I $(LIBSTELL_DIR) -c $<

#%.o: %.f90 $(LIBSTELL_DIR)/mini_libstell.a
#%.o: %.f90 $(LIBSTELL_DIR)/libstell.a   #10/30/18.(7g)
.f90.o:
	@echo "HM. makeqsc/.f90"
	$(FC) $(EXTRA_COMPILE_FLAGS) -I $(LIBSTELL_DIR) -c $<

#%.o: ../Sources/%.f90 $(LIBSTELL_DIR)/mini_libstell.a
#	$(FC) $(EXTRA_COMPILE_FLAGS) -I $(LIBSTELL_DIR) -c $<

#%.o: ../Sources/%.f $(LIBSTELL_DIR)/mini_libstell.a
#	$(FC) $(EXTRA_COMPILE_FLAGS) -I $(LIBSTELL_DIR) -c $<

$(TARGET): $(ObjectFiles) $(LIBSTELL_FOR_REGCOIL)
	@echo "DEPLIST=" $(DEPLIST)
	@echo "OBJLIST=" $(OBJLIST)
	@echo "ObjectFiles=" $(ObjectFiles)
	@echo "HM. makeqsc/target"
	$(FC) -o $(TARGET) $(ObjectFiles) $(LIBSTELL_FOR_REGCOIL) $(EXTRA_LINK_FLAGS)
#	$(FC) -o $(TARGET) $(ObjectFiles) $(LIBSTELL_DIR)/libstell.a $(EXTRA_LINK_FLAGS)

$(LIBSTELL_DIR)/mini_libstell.a:
	$(MAKE) -C mini_libstell

clean:
	rm -f *.o *.mod *.MOD *~ $(TARGET)
	cd mini_libstell; rm -f *.o *.mod *.MOD *.a

test: $(TARGET)
	@echo "Beginning functional tests." && cd examples && export REGCOIL_RETEST=no && ./runExamples.py

retest: $(TARGET)
	@echo "Testing existing output files for examples without re-running then." && cd examples && export REGCOIL_RETEST=yes && ./runExamples.py

test_make:
	@echo HOSTNAME is $(HOSTNAME)
	@echo FC is $(FC)
	@echo LIBSTELL_DIR is $(LIBSTELL_DIR)
	@echo LIBSTELL_FOR_REGCOIL is $(LIBSTELL_FOR_REGCOIL)
	@echo EXTRA_COMPILE_FLAGS is $(EXTRA_COMPILE_FLAGS)
	@echo EXTRA_LINK_FLAGS is $(EXTRA_LINK_FLAGS)
